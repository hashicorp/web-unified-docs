{
  "swagger": "2.0",
  "info": {
    "title": "HashiCorp Cloud Platform Log Service",
    "description": "API for retrieving Log data from HCP",
    "version": "2021-03-30"
  },
  "host": "api.cloud.hashicorp.com",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/logs/2021-03-30/entries/query": {
      "post": {
        "summary": "Get log entries from one or more log streams.",
        "operationId": "LogService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330GetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330GetRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{destination.resource.location.organization_id}/projects/{destination.resource.location.project_id}/resources/destinations/{destination.resource.id}": {
      "patch": {
        "summary": "Update a streaming destination by its id.",
        "operationId": "LogService_UpdateStreamingDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "destination.resource.location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination.resource.location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination.resource.id",
            "description": "id is the identifier for this resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330UpdateStreamingDestinationRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{location.organization_id}/projects/{location.project_id}/resources/destinations": {
      "get": {
        "summary": "List streaming destinations for a given location.",
        "operationId": "LogService_ListStreamingDestinations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330ListStreamingDestinationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      },
      "post": {
        "summary": "Create a streaming destination for a given resource.",
        "operationId": "LogService_CreateStreamingDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateStreamingDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateStreamingDestinationRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{location.organization_id}/projects/{location.project_id}/resources/destinations/test": {
      "post": {
        "summary": "Test a streaming destination config record by sending a test record to the provided configuration",
        "operationId": "LogService_TestStreamingDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330TestStreamingDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330TestStreamingDestinationRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{location.organization_id}/projects/{location.project_id}/resources/destinations/{destination_id}": {
      "get": {
        "summary": "Get a streaming destination by its project and id.",
        "operationId": "LogService_GetStreamingDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330GetStreamingDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id is represents the ID of destination we want to create the filter for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      },
      "delete": {
        "summary": "Delete a streaming destination by its project and id.",
        "operationId": "LogService_DeleteStreamingDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330DeleteStreamingDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id represents the destination id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source_channel",
            "description": "source_channel is the source channel from which the delete request came from. For example terraform vs HCP Portal.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{location.organization_id}/resources/destinations": {
      "get": {
        "summary": "List streaming destinations for a given location.",
        "operationId": "LogService_ListStreamingDestinations2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330ListStreamingDestinationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      },
      "post": {
        "summary": "Create a streaming destination for a given resource.",
        "operationId": "LogService_CreateStreamingDestination2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateStreamingDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateStreamingDestinationRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{location.organization_id}/resources/destinations/{destination_id}": {
      "get": {
        "summary": "Get a streaming destination by its project and id.",
        "operationId": "LogService_GetStreamingDestination2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330GetStreamingDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id is represents the ID of destination we want to create the filter for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "location.project_id",
            "description": "project_id is the projects id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{organization_id}/destinations": {
      "get": {
        "summary": "List the Streaming Destinations in an Organization",
        "operationId": "StreamingService_ListDestinations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330ListDestinationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StreamingService"
        ]
      },
      "post": {
        "summary": "Create a Streaming Destination",
        "operationId": "StreamingService_CreateDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateDestinationRequest"
            }
          }
        ],
        "tags": [
          "StreamingService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{organization_id}/destinations/test": {
      "post": {
        "summary": "Test a Streaming Destination",
        "operationId": "StreamingService_TestDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330TestDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330TestDestinationRequest"
            }
          }
        ],
        "tags": [
          "StreamingService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{organization_id}/destinations/{destination_id}": {
      "get": {
        "summary": "Get a Streaming Destination",
        "operationId": "StreamingService_GetDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330GetDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id uniquely identifies the destination.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StreamingService"
        ]
      },
      "delete": {
        "summary": "Delete a Streaming Destination",
        "operationId": "StreamingService_DeleteDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330DeleteDestinationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id represents the destination id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "source_channel",
            "description": "source_channel is the source channel from which the delete request came from. For example terraform vs HCP Portal.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StreamingService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{organization_id}/destinations/{destination_id}/filters": {
      "post": {
        "summary": "Attach a Filter to a Streaming Destination",
        "operationId": "StreamingService_CreateDestinationFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization_id is the organization holding the destination and filter",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id is the destination associated with the filter",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateDestinationFilterRequest"
            }
          }
        ],
        "tags": [
          "StreamingService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{organization_id}/destinations/{id}": {
      "patch": {
        "summary": "Update a Streaming Destination",
        "operationId": "StreamingService_UpdateDestination",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization_id - the organization holding the destination, required.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "id - the destination's id, required.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330UpdateDestinationRequest"
            }
          }
        ],
        "tags": [
          "StreamingService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{organization_id}/resources/destinations/{destination_id}/filter": {
      "post": {
        "summary": "Create a streaming destination filter for a given resource.",
        "operationId": "LogService_CreateStreamingDestinationFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "destination_id",
            "description": "destination_id is represents the ID of destination we want to create the filter for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateStreamingDestinationFilterRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{resource.location.organization_id}/projects/{resource.location.project_id}/resources/{resource.id}/archives": {
      "get": {
        "summary": "List archives for a given resource.",
        "operationId": "LogService_ListArchives",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330ListArchivesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource.location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.id",
            "description": "id is the identifier for this resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.type",
            "description": "type is the unique type of the resource. Each service publishes a\nunique set of types. The type value is recommended to be formatted\nin \"\u003corg\u003e.\u003ctype\u003e\" such as \"hashicorp.hvn\". This is to prevent conflicts\nin the future, but any string value will work.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.uuid",
            "description": "uuid is the unique UUID for this resource.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.description",
            "description": "description is a human-friendly description for this link. This is\nused primarily for informational purposes such as error messages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      },
      "post": {
        "summary": "Create an archive request.",
        "operationId": "LogService_CreateArchive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateArchiveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource.location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.id",
            "description": "id is the identifier for this resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330CreateArchiveRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{resource.location.organization_id}/projects/{resource.location.project_id}/resources/{resource.id}/archives/{id}": {
      "get": {
        "summary": "List archives for a given resource.",
        "operationId": "LogService_GetArchive",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330GetArchiveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource.location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.id",
            "description": "id is the identifier for this resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "id represents the database id of the archive record.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.type",
            "description": "type is the unique type of the resource. Each service publishes a\nunique set of types. The type value is recommended to be formatted\nin \"\u003corg\u003e.\u003ctype\u003e\" such as \"hashicorp.hvn\". This is to prevent conflicts\nin the future, but any string value will work.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.uuid",
            "description": "uuid is the unique UUID for this resource.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.location.region.provider",
            "description": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.location.region.region",
            "description": "region is the cloud region (\"us-west1\", \"us-east1\").",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource.description",
            "description": "description is a human-friendly description for this link. This is\nused primarily for informational purposes such as error messages.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{resource.location.organization_id}/projects/{resource.location.project_id}/resources/{resource.id}/destinations": {
      "post": {
        "operationId": "LogService_ListStreamingDestinationsForResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330ListStreamingDestinationsForResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource.location.organization_id",
            "description": "organization_id is the id of the organization.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.location.project_id",
            "description": "project_id is the projects id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource.id",
            "description": "id is the identifier for this resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330ListStreamingDestinationsForResourceRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2021-03-30/organizations/{stream.organization_id}/entries/store": {
      "post": {
        "summary": "Store for log entries in a public tenant.",
        "operationId": "LogService_Store",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "stream.organization_id",
            "description": "organization_id is the UUID of the HCP organization this stream belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330StoreRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    },
    "/logs/2022-06-06/organizations/{organization_id}/entries/preview/search": {
      "post": {
        "summary": "Search for log entries in a public tenant.",
        "operationId": "LogService_Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/log_service_20210330SearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization_id",
            "description": "organization_id is the organization id where the query would be ran.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/log_service_20210330SearchRequest"
            }
          }
        ],
        "tags": [
          "LogService"
        ]
      }
    }
  },
  "definitions": {
    "UserPrincipalIdentityType": {
      "type": "string",
      "enum": [
        "UNSET",
        "SOCIAL_GITHUB",
        "EMAIL_PASSWORD",
        "SAMLP",
        "HASHICORP_SSO"
      ],
      "default": "UNSET",
      "description": "IdentityType contains the identity types for users.\n\n - UNSET: UNSET is the default value, should not be used.\n - SOCIAL_GITHUB: SOCIAL_GITHUB is the GitHub Social login provider.\n - EMAIL_PASSWORD: EMAIL_PASSWORD is the auth0 email/password database provider.\n - SAMLP: SAMLP is the auth0 SAML provider.\n - HASHICORP_SSO: HASHICORP_SSO is the HashiCorp SSO provider."
    },
    "cloudiamPrincipal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the identifier for the principal."
        },
        "type": {
          "$ref": "#/definitions/iamPrincipalType",
          "description": "type is the type of the principal."
        },
        "user": {
          "$ref": "#/definitions/cloudiamUserPrincipal",
          "description": "user is a user principal."
        },
        "service": {
          "$ref": "#/definitions/cloudiamServicePrincipal",
          "description": "service is a service principal."
        },
        "group": {
          "$ref": "#/definitions/iamGroup",
          "description": "group is a group principal."
        },
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "group_ids is a list of IDs of the HCP groups that this principal is a\nmember of."
        }
      },
      "description": "Principal is the common wrapper for our different types of principals."
    },
    "cloudiamServicePrincipal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the UUID identifier for this service principal."
        },
        "name": {
          "type": "string",
          "description": "name is the name for this service principal."
        },
        "resource_name": {
          "type": "string",
          "description": "resource_name is the resource name for this service principal."
        },
        "organization_id": {
          "type": "string",
          "description": "organization_id is the UUID identifier of the HCP organization that this\nservice principal belongs to."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "created_at is when the service principal was created."
        },
        "project_id": {
          "type": "string",
          "description": "project_id is the UUID identifier of the HCP project that this\nproject service principal belongs to."
        }
      },
      "description": "ServicePrincipal is the HCP identity for a machine user."
    },
    "cloudiamUserPrincipal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the UUID public identifier for a user principal. It is safe\nto share this value with external users, and it should be how user principals\nare commonly identified also within our platform."
        },
        "email": {
          "type": "string",
          "description": "email is the unique email address of this user."
        },
        "full_name": {
          "type": "string",
          "description": "full_name is the name of the user, as provided by Auth0."
        },
        "identity_type": {
          "$ref": "#/definitions/UserPrincipalIdentityType",
          "description": "identity_type is the identity type for this user."
        },
        "identity_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserPrincipalIdentityType"
          },
          "description": "identity_types is an array of the identity types for this user."
        },
        "subject": {
          "type": "string",
          "description": "subject is the user ID from the authenticating IDP (e.g. Hydra)."
        },
        "scim_synchronized": {
          "type": "boolean",
          "description": "scim_synchronized denotes the user principal was synchronized from a\ncustomer's IdP using SCIM."
        }
      },
      "description": "UserPrincipal represents a human user of our platform."
    },
    "cloudlocationLocation": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "description": "organization_id is the id of the organization."
        },
        "project_id": {
          "type": "string",
          "description": "project_id is the projects id."
        },
        "region": {
          "$ref": "#/definitions/locationRegion",
          "description": "region is the region that the resource is located in. It is\noptional if the object being referenced is a global object."
        }
      },
      "description": "Location represents a target for an operation in HCP."
    },
    "cloudlog_service_20210330Filter": {
      "type": "object",
      "properties": {
        "dataplane_audit_filter": {
          "$ref": "#/definitions/log_service_20210330DataPlaneAuditFilter",
          "description": "dataplane_audit_filter represents a data plane audit filter."
        },
        "organization_filter": {
          "$ref": "#/definitions/log_service_20210330OrganizationFilter",
          "description": "organization_filter represents an org level filter."
        }
      },
      "description": "Filter represents the object that associates or excludes resources with a destination. Depending on the type of resource log the\nfilter determines if the log should be streamed to the configured destination."
    },
    "iamGroup": {
      "type": "object",
      "properties": {
        "resource_id": {
          "type": "string",
          "description": "resource_id is the principal ID of the group."
        },
        "resource_name": {
          "type": "string",
          "description": "resource_name is the name of the group."
        },
        "display_name": {
          "type": "string",
          "description": "display_name is the user-specified display name of the group."
        },
        "description": {
          "type": "string",
          "description": "description is a description of the group."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "created_at is when the group was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "updated_at is when the group was last updated."
        },
        "member_count": {
          "type": "integer",
          "format": "int32",
          "title": "member_count is the count of members in the group.\nWe use Int32Value to make sure we return nil instead of 0 if we don't have a member count"
        },
        "scim_synchronized": {
          "type": "boolean",
          "description": "scim_synchronized denotes the group was synchronized from an upstream IdP using SCIM."
        }
      }
    },
    "iamPrincipalType": {
      "type": "string",
      "enum": [
        "PRINCIPAL_TYPE_UNSPECIFIED",
        "PRINCIPAL_TYPE_USER",
        "PRINCIPAL_TYPE_SERVICE",
        "PRINCIPAL_TYPE_GROUP",
        "PRINCIPAL_TYPE_INTERNAL_OPERATOR"
      ],
      "default": "PRINCIPAL_TYPE_UNSPECIFIED",
      "description": "PrincipalType represents the possible types of principals.\n\n - PRINCIPAL_TYPE_UNSPECIFIED: PRINCIPAL_TYPE_UNSPECIFIED is the default value.\n - PRINCIPAL_TYPE_USER: PRINCIPAL_TYPE_USER is the user principal type.\n - PRINCIPAL_TYPE_SERVICE: PRINCIPAL_TYPE_SERVICE is the service principal type.\n - PRINCIPAL_TYPE_GROUP: PRINCIPAL_TYPE_GROUP is the group principal type.\n - PRINCIPAL_TYPE_INTERNAL_OPERATOR: PRINCIPAL_TYPE_INTERNAL_OPERATOR is the internal operator principal type."
    },
    "locationLink": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type is the unique type of the resource. Each service publishes a\nunique set of types. The type value is recommended to be formatted\nin \"\u003corg\u003e.\u003ctype\u003e\" such as \"hashicorp.hvn\". This is to prevent conflicts\nin the future, but any string value will work."
        },
        "id": {
          "type": "string",
          "description": "id is the identifier for this resource."
        },
        "uuid": {
          "type": "string",
          "description": "uuid is the unique UUID for this resource."
        },
        "location": {
          "$ref": "#/definitions/cloudlocationLocation",
          "description": "location is the location where this resource is."
        },
        "description": {
          "type": "string",
          "description": "description is a human-friendly description for this link. This is\nused primarily for informational purposes such as error messages."
        }
      },
      "description": "Link is used to uniquely reference any resource within HashiCorp Cloud.\nThis can be conceptually considered a \"foreign key\"."
    },
    "locationRegion": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string",
          "title": "provider is the named cloud provider (\"aws\", \"gcp\", \"azure\")"
        },
        "region": {
          "type": "string",
          "title": "region is the cloud region (\"us-west1\", \"us-east1\")"
        }
      },
      "description": "Region identifies a Cloud data-plane region."
    },
    "log_service_20210330Action": {
      "type": "string",
      "enum": [
        "UNSET",
        "READ",
        "CREATE",
        "UPDATE",
        "DELETE"
      ],
      "default": "UNSET",
      "description": "Action is a classification for Control-Plane actions."
    },
    "log_service_20210330AuditFilterScope": {
      "type": "object",
      "properties": {
        "enabled_for_all_resources": {
          "type": "boolean",
          "description": "enabled_for_all_resources dictates that the scope applies to all resources under the umbrella of this destination."
        },
        "resource": {
          "$ref": "#/definitions/locationLink",
          "description": "resource represents the resource to which to tie the scope to."
        }
      },
      "description": "AuditFilterScope represents the scope to which the filter applies for audit log events."
    },
    "log_service_20210330AuthenticationInfo": {
      "type": "object",
      "properties": {
        "principal": {
          "$ref": "#/definitions/cloudiamPrincipal",
          "description": "principal is the authenticated principal as returned by\niam.GetCurrentPrincipal(). This can be a user, service, or an internal\noperator principal."
        },
        "service_principal_delegation_chain": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330ServicePrincipalDelegationInfo"
          },
          "description": "service_principal_delegation_chain store the chain of assumed principals\nleading up to the current principal. The order of principals will be in the\norder the identities were assumed."
        }
      },
      "description": "AuthenticationInfo contains information about the person or process who\ncaused a control-plane event."
    },
    "log_service_20210330Authorization": {
      "type": "object",
      "properties": {
        "header": {
          "type": "string",
          "description": "header represents the header key of an http header."
        },
        "value": {
          "type": "string",
          "description": "value represents the header value of an http header."
        },
        "extra_properties": {
          "type": "object",
          "description": "extra_properties represents any extra headers that should be sent as headers when streaming to the destination."
        }
      },
      "description": "Authorization represents an http authorization header structure."
    },
    "log_service_20210330AuthorizationInfo": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "permissions is the list of permissions required to perform the action."
        },
        "organization_id": {
          "type": "string",
          "description": "organization_id is the ID of the organization the permission was granted\non."
        },
        "project_id": {
          "type": "string",
          "description": "project_id is the ID of the project the permission was granted on."
        },
        "resource_id": {
          "type": "string",
          "description": "resource_id is the ID of the resource the permission was granted on."
        }
      },
      "description": "AuthorizationInfo contains information about the permissions granted to the\nperson triggering a control-plane event."
    },
    "log_service_20210330CloudwatchLogsProvider": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "region represents the region the cloudwatch log is set up for."
        },
        "role_arn": {
          "type": "string",
          "description": "role_arn is the role_arn that will be assumed to stream logs."
        },
        "external_id": {
          "type": "string",
          "description": "external_id represents the external_id to provide when assuming the aws IAM role."
        },
        "log_group_name": {
          "type": "string",
          "description": "log_group_name represents the name of the log group."
        },
        "log_stream_name": {
          "type": "string",
          "description": "log_stream_name represents the name of the log stream."
        }
      },
      "description": "CloudwatchLogsProvider represents the necessary information to configure a cloudwatch destination."
    },
    "log_service_20210330ControlPlaneEvent": {
      "type": "object",
      "properties": {
        "request_info": {
          "$ref": "#/definitions/log_service_20210330RequestInfo",
          "description": "request_info contains information about the request triggering this event."
        },
        "authentication_info": {
          "$ref": "#/definitions/log_service_20210330AuthenticationInfo",
          "description": "authentication_info holds information about the authenticated principal."
        },
        "authorization_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330AuthorizationInfo"
          },
          "description": "authorization_info describes what permissions were required to perform\nthe action and whether the authenticated principal was granted these."
        },
        "metadata": {
          "type": "object",
          "description": "metadata is action-specific data about the request, response, or other\ninformation associated with the current audited event."
        },
        "operation_info": {
          "$ref": "#/definitions/log_service_20210330OperationInfo",
          "description": "operation_info describes the operation this event is part of."
        },
        "description": {
          "type": "string",
          "description": "description describes the event in a human comprehensible manner."
        },
        "action": {
          "$ref": "#/definitions/log_service_20210330Action",
          "description": "Action classifies the performed action."
        },
        "status_code": {
          "type": "string",
          "description": "status_code contains the status code the audited action resulted in. This\nis the string representation of the event's status.code."
        }
      },
      "description": "ControlPlaneEvent captures an action that happened on the HCP control-plane."
    },
    "log_service_20210330CreateArchiveRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/locationLink",
          "description": "resource identifies the resource related to the log entry if one exists."
        },
        "archive_start_time": {
          "type": "string",
          "format": "date-time",
          "description": "start defines the earliest point in time from which to retrieve log entries."
        },
        "archive_end_time": {
          "type": "string",
          "format": "date-time",
          "description": "end defines the latest point in time from which to retrieve log entries."
        }
      },
      "description": "ArchiveRequest represents a request to create an archive for a given resource."
    },
    "log_service_20210330CreateArchiveResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id represents the archive record id for the related request."
        }
      },
      "description": "ArchiveResponse represents the response returned from an archive request."
    },
    "log_service_20210330CreateDestinationFilterRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "title": "organization_id is the organization holding the destination and filter"
        },
        "destination_id": {
          "type": "string",
          "title": "destination_id is the destination associated with the filter"
        },
        "filter_type": {
          "$ref": "#/definitions/log_service_20210330DestinationFilterType",
          "description": "filter_type is the destination filter type to create."
        }
      }
    },
    "log_service_20210330CreateDestinationRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "destination_name": {
          "type": "string",
          "description": "destination_name is a human readable name for the destination."
        },
        "source_channel": {
          "type": "string",
          "description": "source_channel denotes where the create request was made from. For example terraform or the hcp ui."
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingDatadogProvider"
        },
        "cloudwatch_logs_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingCloudwatchLogsProvider"
        },
        "splunk_cloud_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingSplunkCloudProvider"
        }
      }
    },
    "log_service_20210330CreateDestinationResponse": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/log_service_20210330StreamingDestination",
          "description": "destination represents the destination that was created from the request."
        }
      }
    },
    "log_service_20210330CreateStreamingDestinationFilterRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "destination_id": {
          "type": "string",
          "description": "destination_id is represents the ID of destination we want to create the filter for."
        },
        "dataplane_audit_filter": {
          "$ref": "#/definitions/log_service_20210330DataPlaneAuditFilter",
          "description": "audit_filter represents a data plane audit filter."
        },
        "organization_filter": {
          "$ref": "#/definitions/log_service_20210330OrganizationFilter",
          "description": "organization_filter represents an org level filter."
        }
      },
      "description": "CreateStreamingDestinationFilterRequest represents a reqeust to add a filter to a destination record.\nWe don't require the project ID because we will pull it from the destination record."
    },
    "log_service_20210330CreateStreamingDestinationRequest": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/cloudlocationLocation",
          "description": "location is the location (orgID - projectID) the streaming destination will belong to."
        },
        "destination_name": {
          "type": "string",
          "title": "destination_name represents the human readable name of a destination"
        },
        "source_channel": {
          "type": "string",
          "description": "config is the object that stores information about the destination. URL, Authentication, etc...\nsource_channel denotes where the create request was made from. For example terraform or the hcp ui."
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330DatadogProvider",
          "description": "datadog_provider represents a datadog provider."
        },
        "cloudwatchlogs_provider": {
          "$ref": "#/definitions/log_service_20210330CloudwatchLogsProvider",
          "description": "cloudwatchlogs_provider represents a cloudwatch provider."
        },
        "splunk_cloud_provider": {
          "$ref": "#/definitions/log_service_20210330SplunkCloudProvider",
          "description": "splunk_cloud_provider represents a splunk provider."
        }
      },
      "description": "CreateStreamingDestinationRequest represents the request to create a new destination record."
    },
    "log_service_20210330CreateStreamingDestinationResponse": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/log_service_20210330Destination",
          "description": "destination represents the destination that was created from the request."
        }
      },
      "title": "CreateStreamingDestinationResponse is the response of the create destination request"
    },
    "log_service_20210330DataPlaneAuditFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id represents the id of the destination filter"
        },
        "include_resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330AuditFilterScope"
          },
          "description": "include_resources represents resources that should have data plane audit logs streamed."
        }
      },
      "description": "DataPlaneAuditFilter represents a filter that regulates what resources and resource types should have data plane audit logs streamed."
    },
    "log_service_20210330DatadogProvider": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "endpoint represents the datadog endpoint to which to stream logs."
        },
        "authorization": {
          "$ref": "#/definitions/log_service_20210330Authorization",
          "description": "authorization represents the authorization information sent with each request when streaming to the datadog endpoint."
        }
      },
      "description": "DatadogProvider represents the necessary information to configure a datadog destination."
    },
    "log_service_20210330DeleteDestinationResponse": {
      "type": "object",
      "description": "DeleteDestinationResponse represents a response for the delete destination request."
    },
    "log_service_20210330DeleteStreamingDestinationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "success represents if the delete request was successful or not."
        }
      },
      "description": "DeleteStreamingDestinationResponse represents a response for the delete destination request."
    },
    "log_service_20210330Destination": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/locationLink",
          "description": "resource represents the destination record in the form of an HCP resource."
        },
        "name": {
          "type": "string",
          "title": "name represents the human readable name of a destination"
        },
        "filter": {
          "$ref": "#/definitions/cloudlog_service_20210330Filter",
          "description": "filter represents the filters that are attached to the destination record."
        },
        "in_error": {
          "type": "boolean",
          "description": "in_error represents if the HCP platform is currently failing to stream to the destination."
        },
        "last_error_message": {
          "type": "string",
          "description": "last_error_message represents the error message from the response of the last streaming request sent to the destination."
        },
        "endpoint": {
          "type": "string",
          "title": "endpoint represents the endpoint that the destination is configured to stream to"
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330DatadogProvider",
          "description": "datadog_provider represents a datadog provider."
        },
        "cloudwatchlogs_provider": {
          "$ref": "#/definitions/log_service_20210330CloudwatchLogsProvider",
          "description": "cloudwatchlogs_provider represents a cloudwatch provider."
        },
        "splunk_cloud_provider": {
          "$ref": "#/definitions/log_service_20210330SplunkCloudProvider",
          "description": "splunk_cloud_provider represents a splunk cloud provider."
        },
        "status": {
          "type": "string",
          "title": "status destination status field error/pending/success"
        }
      },
      "description": "Destination represents a destination to which to stream log events to."
    },
    "log_service_20210330DestinationFilterType": {
      "type": "string",
      "enum": [
        "DESTINATION_FILTER_TYPE_UNKNOWN",
        "DESTINATION_FILTER_TYPE_ORG_FILTER"
      ],
      "default": "DESTINATION_FILTER_TYPE_UNKNOWN"
    },
    "log_service_20210330DestinationSource": {
      "type": "string",
      "enum": [
        "DESTINATION_SOURCE_UNKNOWN",
        "DESTINATION_SOURCE_TERRAFORM",
        "DESTINATION_SOURCE_HCP_UI"
      ],
      "default": "DESTINATION_SOURCE_UNKNOWN"
    },
    "log_service_20210330DestinationStatus": {
      "type": "string",
      "enum": [
        "DESTINATION_STATUS_UNSPECIFIED",
        "DESTINATION_STATUS_STREAMING",
        "DESTINATION_STATUS_FAILING_USER",
        "DESTINATION_STATUS_FAILING_HCP",
        "DESTINATION_STATUS_FAILING_PROVIDER"
      ],
      "default": "DESTINATION_STATUS_UNSPECIFIED",
      "description": "DestinationStatus indicates whether the destination is successfully streaming logs to the provider or failing to do so.\n\n - DESTINATION_STATUS_STREAMING: DESTINATION_STATUS_STREAMING: the destination is streaming logs to the provider.\n - DESTINATION_STATUS_FAILING_USER: DESTINATION_STATUS_FAILING_USER: the destination is failing to stream logs because of a user error (e.g. invalid credentials).\n - DESTINATION_STATUS_FAILING_HCP: DESTINATION_STATUS_FAILING_HCP: the destination is failing to stream logs because of a HashiCorp Cloud Platform error.\n - DESTINATION_STATUS_FAILING_PROVIDER: DESTINATION_STATUS_FAILING_PROVIDER: the destination is failing to stream logs because of a provider error."
    },
    "log_service_20210330EventType": {
      "type": "string",
      "enum": [
        "EVENT_TYPE_UNSET",
        "EVENT_TYPE_AUDIT_LOG",
        "EVENT_TYPE_SERVER_LOG_STDOUT",
        "EVENT_TYPE_SERVER_LOG_STDERR"
      ],
      "default": "EVENT_TYPE_UNSET"
    },
    "log_service_20210330GetArchiveResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id represents the database id of the archive record."
        },
        "status": {
          "$ref": "#/definitions/log_service_20210330Status",
          "description": "status represents the status of the archive record."
        },
        "url": {
          "type": "string",
          "description": "url represents the url from which to download the archive record."
        },
        "error": {
          "type": "string",
          "description": "error represents the error returned for an archive."
        },
        "url_expiration": {
          "type": "string",
          "format": "date-time",
          "description": "url_expiration represents the timestamp of when the url expires."
        },
        "archive_requested_time": {
          "type": "string",
          "format": "date-time",
          "description": "archive_requested_time represents the time which the archive record was created."
        },
        "archive_start_time": {
          "type": "string",
          "format": "date-time",
          "description": "archive_requested_start_time represents the start time which the archive record was specified."
        },
        "archive_end_time": {
          "type": "string",
          "format": "date-time",
          "description": "archive_requested_end_time represents the end time which the archive record was specified."
        }
      },
      "description": "GetArchiveResponse represents the response for an archive request."
    },
    "log_service_20210330GetDestinationResponse": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/log_service_20210330StreamingDestination"
        }
      }
    },
    "log_service_20210330GetRequest": {
      "type": "object",
      "properties": {
        "streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330LogStream"
          },
          "description": "streams is the list of Log Streams to query from. At least one Log Stream\nis required."
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "description": "start defines the earliest point in time from which to retrieve log\nentries."
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "end defines the latest point in time from which to retrieve log entries."
        },
        "page_size": {
          "type": "integer",
          "format": "int64",
          "description": "The max number of results per page that should be returned."
        },
        "next_page_token": {
          "type": "string",
          "description": "Specifies a page token to use to retrieve the next page."
        },
        "order_by": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the list of per field ordering that should be used for sorting."
        }
      },
      "description": "GetRequest is the request payload processed by the Get RPC."
    },
    "log_service_20210330GetResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330LogEntry"
          },
          "description": "entries is the list of log entries matching the request."
        },
        "next_page_token": {
          "type": "string",
          "description": "This token allows you to get the next page of results for list requests."
        }
      },
      "description": "GetResponse is the response returned from Get RPCs."
    },
    "log_service_20210330GetStreamingDestinationResponse": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/log_service_20210330Destination",
          "title": "destination is the destination record returned from the request"
        }
      },
      "title": "GetStreamingDestinationResponse represents the response to the get streaming destination request"
    },
    "log_service_20210330ListArchiveRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id represents the database id of the archive record."
        },
        "status": {
          "$ref": "#/definitions/log_service_20210330Status",
          "description": "status represents the status of the archive record."
        },
        "error": {
          "type": "string",
          "description": "error is the potential error that occurred while creating the archive record."
        },
        "archive_requested_time": {
          "type": "string",
          "format": "date-time",
          "description": "archive_requested_time represents the time which the archive record was created."
        },
        "archive_start_time": {
          "type": "string",
          "format": "date-time",
          "description": "archive_requested_start_time represents the start time which the archive record was specified."
        },
        "archive_end_time": {
          "type": "string",
          "format": "date-time",
          "description": "archive_requested_end_time represents the end time which the archive record was specified."
        }
      },
      "description": "ListArchivedRecord represents a single archive record."
    },
    "log_service_20210330ListArchivesResponse": {
      "type": "object",
      "properties": {
        "archives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330ListArchiveRecord"
          },
          "description": "archives represents the list of archive records that are related to a resource."
        },
        "config_creation_date": {
          "type": "string",
          "format": "date-time",
          "description": "config_creation_date represents the date when the data plane configuration was created for a resource ."
        }
      },
      "description": "ListArchiveResponse represents the response from the list archive request."
    },
    "log_service_20210330ListDestinationsResponse": {
      "type": "object",
      "properties": {
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330StreamingListDestination"
          }
        }
      }
    },
    "log_service_20210330ListStreamingDestinationsForResourceRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/locationLink",
          "description": "resource is the link the streaming destinations are attached to."
        }
      },
      "title": "ListStreamingDestinationsForResourceRequest represents a request to get all destination record for a resources"
    },
    "log_service_20210330ListStreamingDestinationsForResourceResponse": {
      "type": "object",
      "properties": {
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330Destination"
          },
          "description": "destinations are the list of destinations returned."
        }
      },
      "title": "ListStreamingDestinationsResponse is the response for the list destination request"
    },
    "log_service_20210330ListStreamingDestinationsResponse": {
      "type": "object",
      "properties": {
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330Destination"
          },
          "description": "destinations are the list of destinations returned."
        }
      },
      "title": "ListStreamingDestinationResponse is the response for the list destination request"
    },
    "log_service_20210330LogEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the unique identifier of this log entry."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "timestamp is the time this log entry was stored."
        },
        "stream": {
          "$ref": "#/definitions/log_service_20210330LogStream",
          "description": "stream identifies the log stream this log entry is part of."
        },
        "resource": {
          "$ref": "#/definitions/locationLink",
          "description": "resource identifies the resource related to the log entry if one exists."
        },
        "control_plane_event": {
          "$ref": "#/definitions/log_service_20210330ControlPlaneEvent",
          "description": "control_plane_event includes details about an action that happened on the\nHCP control-plane."
        },
        "service_log_event": {
          "$ref": "#/definitions/log_service_20210330ServiceLogEvent",
          "description": "service_log_event includes details about an action that happened on the\nHCP data-plane."
        },
        "subject": {
          "$ref": "#/definitions/log_service_20210330Subject",
          "title": "Subject will replace resource and identifies the resources/users/organizations/etc\nassociated with the log entry"
        }
      },
      "description": "LogEntry represents a single log entry that is stored in the Log System."
    },
    "log_service_20210330LogStream": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "description": "organization_id is the UUID of the HCP organization this stream belongs to."
        },
        "project_id": {
          "type": "string",
          "description": "project_id is the UUID of the HCP project this stream belongs to.\nIf no project_id is set, this stream belongs to an organization directly."
        },
        "topic": {
          "type": "string",
          "description": "topic is the logical name of the log stream."
        }
      },
      "description": "LogStream identifies a log stream."
    },
    "log_service_20210330MatrixResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330MatrixValue"
          },
          "description": "values are the matrix values entries returned from loki."
        }
      }
    },
    "log_service_20210330MatrixValue": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "uint64",
          "description": "number is the value in second unix epoch."
        },
        "payload": {
          "type": "string",
          "description": "payload is the string representation of the value."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp number value represented as a timestamp"
        }
      }
    },
    "log_service_20210330OperationInfo": {
      "type": "object",
      "properties": {
        "operation_id": {
          "type": "string",
          "description": "operation_id is the ID of the operation."
        }
      },
      "description": "OperationInfo contains information about the operation a control-plane event\nis part of."
    },
    "log_service_20210330OrganizationFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is the id of the filter."
        }
      },
      "description": "OrganizationFilter represents an org level filter that will by default stream all logs."
    },
    "log_service_20210330RequestInfo": {
      "type": "object",
      "properties": {
        "http_verb": {
          "type": "string",
          "description": "http_verb is the HTTP verb/method of the respective HTTP request if there\nwas one."
        },
        "http_path": {
          "type": "string",
          "description": "http_path is the URL path of the respective HTTP request if there was one."
        },
        "http_user_agent": {
          "type": "string",
          "description": "http_user_agent is the user agent sent as part of the respective HTTP\nrequest if there was one."
        },
        "http_client_ip": {
          "type": "string",
          "description": "http_client_ip is the IP address of the client sending the HTTP request if\nthere was one."
        }
      },
      "description": "RequestInfo contains information about the request that triggered an event."
    },
    "log_service_20210330SearchRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "description": "organization_id is the organization id where the query would be ran."
        },
        "query": {
          "type": "string",
          "description": "query is the LogQL query that will be sent to loki to retrieve results."
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "start defines the earliest point in time from which to retrieve log\nentries. Defaults to now - 5 minutes"
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "description": "end defines the latest point in time from which to retrieve log entries.\nDefaults to now."
        },
        "page_size": {
          "type": "integer",
          "format": "int64",
          "description": "The max number of results per page that should be returned."
        },
        "next_page_token": {
          "type": "string",
          "description": "Specifies a page token to use to retrieve the next page."
        },
        "order_by": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the list of per field ordering that should be used for sorting."
        }
      }
    },
    "log_service_20210330SearchResponse": {
      "type": "object",
      "properties": {
        "streams": {
          "$ref": "#/definitions/log_service_20210330StreamsResponse",
          "description": "streams is a set of all values (logs) over the queried time range."
        },
        "matrix": {
          "$ref": "#/definitions/log_service_20210330MatrixResponse",
          "description": "matrix are only returned when running a query that computes some value."
        },
        "next_page_token": {
          "type": "string",
          "description": "This token allows you to get the next page of results for list requests."
        }
      }
    },
    "log_service_20210330ServiceLogEvent": {
      "type": "object",
      "properties": {
        "log_name": {
          "type": "string",
          "description": "log_name is the service/resource name the log belongs to."
        },
        "event_type": {
          "$ref": "#/definitions/log_service_20210330EventType",
          "description": "event_type represents the type log entry this event represents."
        },
        "metadata": {
          "type": "object",
          "title": "metadata is an extra information service teams want to add to a customer payload"
        },
        "insert_id": {
          "type": "string",
          "description": "insert_id is an optional, unique, identifier for the log event.\nClients can assign this field a value or it will be assigned as part of\nprocessing by the log service."
        },
        "text_payload": {
          "type": "string"
        },
        "json_payload": {
          "type": "object"
        }
      }
    },
    "log_service_20210330ServicePrincipalDelegationInfo": {
      "type": "object",
      "properties": {
        "resource_id": {
          "type": "string",
          "description": "resource_id is the id of the principal or workload identity provider that\nassumed the service principal."
        },
        "resource_name": {
          "type": "string",
          "description": "resource_name is the resource_name of the principal or workload identity provider that\nassumed the service principal."
        }
      },
      "description": "ServicePrincipalDelegationInfo captures the identity or workload identity\nprovider that was used to assume a service principal."
    },
    "log_service_20210330SplunkCloudProvider": {
      "type": "object",
      "properties": {
        "hec_endpoint": {
          "type": "string",
          "description": "hec_endpoint represents the splunk endpoint to which to stream logs."
        },
        "token": {
          "type": "string",
          "description": "token represents the access token used when streaming to the splunk endpoint."
        }
      },
      "description": "SplunkCloudProvider represents the necessary information to configure a splunk cloud destination."
    },
    "log_service_20210330Status": {
      "type": "string",
      "enum": [
        "STATUS_UNSET",
        "STATUS_PROCESSING",
        "STATUS_COMPLETED",
        "STATUS_FAILED"
      ],
      "default": "STATUS_UNSET",
      "title": "Status is the status of an ArchiveRequest"
    },
    "log_service_20210330StoreRequest": {
      "type": "object",
      "properties": {
        "stream": {
          "$ref": "#/definitions/log_service_20210330LogStream",
          "description": "stream identifies the log stream this request's batch of log entries is a\npart of."
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330LogEntry"
          },
          "description": "entries is the batch of log entries to store."
        }
      }
    },
    "log_service_20210330StreamingAuthorization": {
      "type": "object",
      "properties": {
        "header": {
          "type": "string",
          "description": "header represents the header key of an http header."
        },
        "value": {
          "type": "string",
          "description": "value represents the header value of an http header."
        },
        "extra_properties": {
          "type": "object",
          "description": "extra_properties represents any extra headers that should be sent as headers when streaming to the destination."
        }
      },
      "description": "StreamingAuthorization represents an http authorization header structure."
    },
    "log_service_20210330StreamingCloudwatchLogsProvider": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "region represents the region the cloudwatch log is set up for."
        },
        "role_arn": {
          "type": "string",
          "description": "role_arn is the role_arn that will be assumed to stream logs."
        },
        "external_id": {
          "type": "string",
          "description": "external_id represents the external_id to provide when assuming the aws IAM role."
        },
        "log_group_name": {
          "type": "string",
          "description": "log_group_name represents the name of the log group."
        },
        "log_stream_name": {
          "type": "string",
          "description": "log_stream_name represents the name of the log stream."
        }
      },
      "description": "CloudwatchLogsProvider represents the necessary information to configure a cloudwatch destination."
    },
    "log_service_20210330StreamingDatadogProvider": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "endpoint represents the datadog endpoint to which to stream logs."
        },
        "authorization": {
          "$ref": "#/definitions/log_service_20210330StreamingAuthorization",
          "description": "authorization represents the authorization information sent with each request when streaming to the datadog endpoint."
        }
      },
      "description": "StreamingDatadogProvider represents the necessary information to configure a datadog destination."
    },
    "log_service_20210330StreamingDestination": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "description": "organization_id is the ID of the organization holding the destination."
        },
        "id": {
          "type": "string",
          "description": "id is the destination's ID."
        },
        "name": {
          "type": "string",
          "title": "name represents the human readable name of a destination"
        },
        "filter": {
          "$ref": "#/definitions/log_service_20210330StreamingFilter",
          "description": "filter is the filter attached to the destination."
        },
        "status": {
          "type": "string",
          "title": "status destination status field error/pending/success"
        },
        "last_error_message": {
          "type": "string",
          "description": "last_error_message is the error message from the last streaming attempt.\nIt's an empty string if the last attempt succeeded."
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingDatadogProvider"
        },
        "cloudwatch_logs_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingCloudwatchLogsProvider"
        },
        "splunk_cloud_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingSplunkCloudProvider"
        },
        "source": {
          "$ref": "#/definitions/log_service_20210330DestinationSource"
        }
      },
      "description": "StreamingDestination represents a destination to which to stream log events to."
    },
    "log_service_20210330StreamingFilter": {
      "type": "object",
      "properties": {
        "organization_filter": {
          "$ref": "#/definitions/log_service_20210330StreamingOrganizationFilter"
        },
        "resource_filter": {
          "$ref": "#/definitions/log_service_20210330StreamingResourceFilter"
        }
      }
    },
    "log_service_20210330StreamingListDestination": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "id is the destination's ID."
        },
        "name": {
          "type": "string",
          "title": "name represents the human readable name of a destination"
        },
        "filter": {
          "$ref": "#/definitions/log_service_20210330StreamingFilter",
          "description": "filter is the filter attached to the destination."
        },
        "status": {
          "type": "string",
          "title": "status destination status field error/pending/success"
        },
        "last_error_message": {
          "type": "string",
          "description": "last_error_message is the error message from the last streaming attempt.\nIt's an empty string if the last attempt succeeded."
        },
        "endpoint": {
          "type": "string",
          "title": "endpoint represents the endpoint that the destination is configured to stream to"
        },
        "source": {
          "$ref": "#/definitions/log_service_20210330DestinationSource"
        },
        "provider_type": {
          "type": "string",
          "description": "provider_type represents the provider type of the destination."
        }
      }
    },
    "log_service_20210330StreamingOrganizationFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id uniquely identifies the filter"
        }
      },
      "title": "StreamingOrganizationFilter sends all of an organization's logs to a streaming destination"
    },
    "log_service_20210330StreamingResourceFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id uniquely identifies the filter."
        },
        "resource": {
          "$ref": "#/definitions/locationLink",
          "description": "resource - the filter sends logs with this resource link to the destination."
        }
      }
    },
    "log_service_20210330StreamingSplunkCloudProvider": {
      "type": "object",
      "properties": {
        "hec_endpoint": {
          "type": "string",
          "description": "hec_endpoint represents the splunk endpoint to which to stream logs."
        },
        "token": {
          "type": "string",
          "description": "token represents the access token used when streaming to the splunk endpoint."
        }
      },
      "description": "StreamingSplunkCloudProvider represents the necessary information to configure a splunk cloud destination."
    },
    "log_service_20210330StreamsResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/log_service_20210330LogEntry"
          },
          "description": "entries is the list of log entries matching the query."
        }
      }
    },
    "log_service_20210330Subject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Subject represents the subject associated with a log entry."
    },
    "log_service_20210330TestDestinationRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "title": "id is an optional field that identifies an existing destination"
        },
        "mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "description": "mask is an optional field specifying the fields to replace on the existing destination.\nIf id is empty, mask must be empty. If the id is not empty, mask is required."
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingDatadogProvider"
        },
        "cloudwatch_logs_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingCloudwatchLogsProvider"
        },
        "splunk_cloud_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingSplunkCloudProvider"
        }
      },
      "description": "TestDestinationRequest represents a request to test a streaming destination config record."
    },
    "log_service_20210330TestDestinationResponse": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "title": "request_id is a unique id that can be used to refer to this specific test operation"
        },
        "status": {
          "$ref": "#/definitions/log_service_20210330DestinationStatus",
          "description": "status indicates whether the destination is successfully streaming logs to the provider or failing to do so."
        },
        "error_message": {
          "type": "string",
          "title": "error_message is an optional message that includes additional details about the error\nit would be used if the error message is meaningful or actionable to the customer\nin some cases (e.g. internal errors) we will not include any messages"
        },
        "test_payload": {
          "type": "string",
          "title": "test_payload is the log payload we sent to the customer destination\nthis would only be set if the status is \"success\""
        }
      }
    },
    "log_service_20210330TestStreamingDestinationRequest": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/cloudlocationLocation",
          "description": "location is the location (orgID - projectID) the streaming destination will belong to."
        },
        "existing_destination_id": {
          "type": "string",
          "title": "existing_destination_id is the original destination id\nthis should be set only if we need to test config with redacted fields"
        },
        "mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "title": "mask specifies which fields to use from provider to override fields in existing destination"
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330DatadogProvider",
          "description": "datadog_provider represents a datadog provider."
        },
        "cloudwatchlogs_provider": {
          "$ref": "#/definitions/log_service_20210330CloudwatchLogsProvider",
          "description": "cloudwatchlogs_provider represents a cloudwatch provider."
        }
      },
      "description": "TestStreamingDestinationRequest represents a request to test a streaming destination config record."
    },
    "log_service_20210330TestStreamingDestinationResponse": {
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "title": "request_id is a unique id that can be used to refer to this specific test operation"
        },
        "status": {
          "type": "string",
          "title": "status is the overall status of the test destination operation\nsuccess means that the test passed successfully\nfailed means that the test failed for some reason"
        },
        "error_type": {
          "type": "string",
          "title": "error_type is a high level category of error, so the UI can link to some kind of relevant recommendation\npossible types\ninternal       -\u003e something internal failed (e.g. lambda outage, a bug ...etc)\naccess         -\u003e access related issues (e.g. api key not allowed to write logs, iam role cannot be assumed)\ninvalid_config -\u003e destination config are invalid, or not available (e.g. invalid iam role, or iam role does not exist)"
        },
        "error_message": {
          "type": "string",
          "title": "error_message is an optional message that includes additional details about the error\nit would be used if the error message is meaningful or actionable to the customer\nin some cases (e.g. internal errors) we will not include any messages"
        },
        "test_payload": {
          "type": "string",
          "title": "test_payload is the log payload we sent to the customer destination\nthis would only be set if the status is \"success\""
        }
      },
      "title": "TestStreamingDestinationResponse represents a a response from test a streaming destination"
    },
    "log_service_20210330UpdateDestinationRequest": {
      "type": "object",
      "properties": {
        "organization_id": {
          "type": "string",
          "description": "organization_id - the organization holding the destination, required."
        },
        "id": {
          "type": "string",
          "description": "id - the destination's id, required."
        },
        "name": {
          "type": "string",
          "description": "name - the new name for the destination, optional."
        },
        "datadog_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingDatadogProvider"
        },
        "cloudwatch_logs_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingCloudwatchLogsProvider"
        },
        "splunk_cloud_provider": {
          "$ref": "#/definitions/log_service_20210330StreamingSplunkCloudProvider"
        },
        "mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "description": "mask identifies the fields to validate and update."
        }
      }
    },
    "log_service_20210330UpdateStreamingDestinationRequest": {
      "type": "object",
      "properties": {
        "destination": {
          "$ref": "#/definitions/log_service_20210330Destination",
          "description": "destination represents the destination record."
        },
        "mask": {
          "$ref": "#/definitions/protobufFieldMask",
          "description": "mask represnts the requested fields to be updated."
        },
        "source_channel": {
          "type": "string",
          "description": "source_channel denotes where the update request was made from. For example terraform or the hcp ui."
        }
      },
      "description": "UpdateStreamingDestinationRequest represents a request to update a destination record name or confiuration."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
