name: UDR Product Link Check

on:
  workflow_dispatch:
    inputs:
      product:
        description: 'Product to check (terraform, vault, consul, etc.)'
        required: true
        type: choice
        options:
          - terraform
          - terraform-cdk
          - terraform-docs-agents
          - terraform-docs-common
          - terraform-enterprise
          - terraform-migrate
          - terraform-plugin-framework
          - terraform-plugin-log
          - terraform-plugin-mux
          - terraform-plugin-sdk
          - terraform-plugin-testing
          - vault
          - well-architected-framework
      specific_paths:
        description: 'Specific paths to check (optional - defaults to entire product)'
        default: ''
        type: string

jobs:
  migration-link-check:
    runs-on: ubuntu-latest
    if: github.repository == 'hashicorp/web-unified-docs'
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Set content path
        id: paths
        run: |
          if [ -n "${{ inputs.specific_paths }}" ]; then
            echo "content_path=${{ inputs.specific_paths }}" >> $GITHUB_OUTPUT
          else
            echo "content_path=./content/${{ inputs.product }}/" >> $GITHUB_OUTPUT
          fi

      - name: Run lychee link checker for migration
        id: lychee
        uses: lycheeverse/lychee-action@f613c4a64e50d792e0b31ec34bbcbba12263c6a6 # v2.3.0
        with:
          args: >-
            ${{ steps.paths.outputs.content_path }}
            -b https://developer.hashicorp.com/
            --exclude-all-private
            --exclude '\.(svg|gif|jpg|png)'
            --exclude 'gnu\.org'
            --accept 200,408,429
            --timeout=60
            --max-concurrency 24
            --no-progress
            --verbose
          fail: false
          failIfEmpty: false
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Generate migration-specific issue content
        if: steps.lychee.outputs.exit_code != 0
        run: |
          # Count different types of broken links
          TOTAL_COUNT=$(grep -c "✗" ./lychee/out.md || echo "0")

          # Define HashiCorp domains (easily maintainable list)
          HASHICORP_DOMAINS="hashicorp\.com|hashicorp\.io|terraform\.io|consul\.io|vault\.io|nomad\.io|packer\.io|vagrant\.io|waypoint\.io|boundary\.io|hcp\.io"

          # Count internal HashiCorp links using the dynamic list
          INTERNAL_COUNT=$(grep -E "✗.*($HASHICORP_DOMAINS)" ./lychee/out.md | wc -l || echo "0")

          EXTERNAL_COUNT=$((TOTAL_COUNT - INTERNAL_COUNT))

          # Create migration-specific issue content
          cat > ./migration-issue-content.md << EOF
          # UDR Migration Link Check - ${{ inputs.product }}

          ## Migration Summary

          - **Product**: ${{ inputs.product }}
          - **Content path**: ${{ steps.paths.outputs.content_path }}
          - **Total broken links**: $TOTAL_COUNT
          - **Internal HashiCorp links**: $INTERNAL_COUNT (CRITICAL - fix before migration)
          - **External links**: $EXTERNAL_COUNT (review for migration impact)
          - **Scan date**: $(date '+%Y-%m-%d %H:%M:%S UTC')

          ## Pre-Migration Action Items

          **CRITICAL (must fix before UDR migration):**
          - [ ] Fix all $INTERNAL_COUNT internal HashiCorp broken links
          - [ ] Test internal links work with UDR URL structure
          - [ ] Verify cross-product references are correct

          **IMPORTANT (review during migration):**
          - [ ] Check if external links need URL updates for UDR
          - [ ] Verify asset links (images, downloads) work in UDR
          - [ ] Test that relative links work correctly

          ## Migration Notes

          This scan targets **${{ inputs.product }}** content specifically for UDR migration preparation. 

          **Focus areas:**
          1. Internal links are highest priority - these MUST work in UDR
          2. External links may need review if they reference HashiCorp URLs
          3. Asset and relative links should be tested in UDR environment

          ## Link Details

          EOF

          # Add the actual lychee output
          cat ./lychee/out.md >> ./migration-issue-content.md

          # Add footer
          cat >> ./migration-issue-content.md << EOF

          ---

          **Migration Workflow**: This issue was generated by the UDR Migration Link Check workflow.

          **Next steps**: Fix critical internal links, then run this workflow again to verify fixes before proceeding with UDR migration.
          EOF

      - name: Create migration-specific GitHub issue
        id: create_issue
        if: steps.lychee.outputs.exit_code != 0
        uses: peter-evans/create-issue-from-file@e8ef132d6df98ed982188e460ebb3b5d4ef3a9cd # v5.0.1
        with:
          title: 'UDR Migration Link Check - ${{ inputs.product }} - $(date +"%Y-%m-%d")'
          content-filepath: ./migration-issue-content.md
          labels: |
            udr-migration
            link-checker
            ${{ inputs.product }}

      - name: Send migration-specific Datadog alert
        if: steps.lychee.outputs.exit_code != 0
        run: |
          BROKEN_COUNT=$(grep -c "✗" ./lychee/out.md || echo "0")
          INTERNAL_COUNT=$(grep -E "✗.*(hashicorp\.com|hashicorp\.io|terraform\.io|consul\.io|vault\.io|nomad\.io|packer\.io|vagrant\.io|waypoint\.io|boundary\.io|hcp\.io)" ./lychee/out.md | wc -l || echo "0")

          # Send structured alert to Datadog for migration monitoring
          curl -X POST "https://http-intake.logs.datadoghq.com/v1/input/${{ secrets.DD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ddsource": "github-actions",
              "ddtags": "environment:migration,service:web-unified-docs,alert_type:udr_migration_links,product:${{ inputs.product }}",
              "hostname": "github-actions",
              "message": "UDR migration prep: ${{ inputs.product }} has '"$BROKEN_COUNT"' broken links ('"$INTERNAL_COUNT"' internal)",
              "level": "warn",
              "product": "${{ inputs.product }}",
              "total_broken_links": '"$BROKEN_COUNT"',
              "internal_broken_links": '"$INTERNAL_COUNT"',
              "migration_stage": "pre_migration_check",
              "content_path": "${{ steps.paths.outputs.content_path }}",
              "issue_url": "https://github.com/${{ github.repository }}/issues/${{ steps.create_issue.outputs.issue-number }}"
            }' || echo "Failed to send Datadog migration alert"

      - name: Report migration success
        if: steps.lychee.outputs.exit_code == 0
        run: |
          echo "## UDR Migration Link Check - SUCCESS!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Product**: ${{ inputs.product }}" >> $GITHUB_STEP_SUMMARY
          echo "**Content path**: ${{ steps.paths.outputs.content_path }}" >> $GITHUB_STEP_SUMMARY
          echo "**Result**: No broken links found - ready for UDR migration!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps**: This product appears ready for UDR migration from a link health perspective." >> $GITHUB_STEP_SUMMARY

          # Log migration readiness to Datadog
          curl -X POST "https://http-intake.logs.datadoghq.com/v1/input/${{ secrets.DD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ddsource": "github-actions",
              "ddtags": "environment:migration,service:web-unified-docs,alert_type:udr_migration_ready,product:${{ inputs.product }}",
              "hostname": "github-actions",
              "message": "UDR migration prep: ${{ inputs.product }} has no broken links - ready for migration",
              "level": "info",
              "product": "${{ inputs.product }}",
              "migration_stage": "pre_migration_check",
              "migration_ready": true,
              "content_path": "${{ steps.paths.outputs.content_path }}"
            }' || echo "Failed to send Datadog migration readiness metric"

      - name: Report migration issues found
        if: steps.lychee.outputs.exit_code != 0
        run: |
          echo "## UDR Migration Link Check - Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Product**: ${{ inputs.product }}" >> $GITHUB_STEP_SUMMARY
          echo "**Content path**: ${{ steps.paths.outputs.content_path }}" >> $GITHUB_STEP_SUMMARY
          echo "**Result**: Broken links found - review before UDR migration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GitHub Issue**: [View detailed report](https://github.com/${{ github.repository }}/issues/${{ steps.create_issue.outputs.issue-number }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps**: Fix critical internal links, then run this workflow again before proceeding with UDR migration." >> $GITHUB_STEP_SUMMARY
